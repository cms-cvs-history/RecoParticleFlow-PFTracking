process PROD  = 
{

    # The number of events to be processed.
    untracked PSet maxEvents = {untracked int32 input = 20000}
    
    service =  RandomNumberGeneratorService {
	untracked uint32 sourceSeed = 123456789
	# This is to initialize the random engine of Famos
	# Watch out! This works only if the FamosProducer label is "famosSimHits"
	PSet moduleSeeds =
	{
	    untracked uint32 VtxSmeared = 123456789
	    untracked uint32 famosSimHits = 13579
	    untracked uint32 siTrackerGaussianSmearingRecHits = 24680
	    untracked uint32 caloRecHits = 654321
	    untracked uint32 paramMuons = 54525
	}
    }
    
    /* */
    source = PythiaSource {
	
	PSet PythiaParameters = {
	    
	    # This is a vector of ParameterSet names to be read, in this order
	    # The first two are in the include files below
	    # The last one are simply my additional parameters
	    vstring parameterSets = {
		#	"pythiaMinBias", 
		"myParameters"
	    }
	    #
	    # Default cards for minimum bias events (unfiltered)
	    # Name of the set is "pythiaMinBias"
	    #include "IOMC/GeneratorInterface/test/pythiaMinBias.cfg"
	    #
	    # User cards - name is "myParameters"
	    # Pythia's random generator initialization 
	    vstring myParameters = {
		  'MSEL=1 ! 1 or 5         ! General QCD',

        # B decays
        'MDME(953,1)=0',
        'MDME(954,1)=0',
        'MDME(955,1)=0',
        'MDME(956,1)=0',
        'MDME(957,1)=0',
        'MDME(958,1)=0',
        'MDME(959,1)=0',
        'MDME(960,1)=0',
        'MDME(961,1)=0',
        'MDME(962,1)=0',
        'MDME(963,1)=0',
        'MDME(964,1)=0',
        'MDME(965,1)=0',
        'MDME(966,1)=0',
        'MDME(967,1)=0',
        'MDME(968,1)=0',
        'MDME(969,1)=0',
        'MDME(970,1)=0',
        'MDME(971,1)=0',
        'MDME(972,1)=0',
        'MDME(973,1)=0',
        'MDME(974,1)=0',
        'MDME(975,1)=0',
        'MDME(976,1)=0',
        'MDME(977,1)=0',
        'MDME(978,1)=0',
        'MDME(979,1)=0',
        'MDME(980,1)=0',
        'MDME(981,1)=0',
        'MDME(982,1)=1 ! Bs->J/psi+phi',
        'MDME(983,1)=0',
        'MDME(984,1)=0',
        'MDME(985,1)=0',
        'MDME(986,1)=0',
        'MDME(987,1)=0',
        'MDME(988,1)=0 ',
        'MDME(989,1)=0',
        'MDME(990,1)=0',
        'MDME(991,1)=0',
 
        # J/psi decays
        'MDME(858,1)=1 ! J/psi->e+e-',
        'MDME(859,1)=0 ! J/psi->mumu',
        'MDME(860,1)=0',

        'MDME(656,1)=1 ! phi->K+K-',
        'MDME(657,1)=0',
        'MDME(658,1)=0',
        'MDME(659,1)=0',
        'MDME(660,1)=0',
        'MDME(661,1)=0',
        'MDME(662,1)=0 ',
        'MDME(663,1)=0',
        'MDME(664,1)=0',
        'MDME(665,1)=0',
        'MDME(666,1)=0 ! phi->pi+pi-'
	    }
	    
	}
    }	
    /* */
    
    /*
    source = FlatRandomPtGunSource 
    {	 
	untracked uint32 firstRun  = 1
	untracked      PSet  PGunParameters =
	{
	    # you can request more than 1 particle
	    #untracked vint32  PartID = { 211, 11, -13 }
	    untracked vint32 PartID = {13} 
	    untracked double MinEta = -2.0
	    untracked double MaxEta = 2.0
	    untracked double MinPhi = -3.14159265358979323846  # it must be in radians
	    untracked double MaxPhi =  3.14159265358979323846
	    untracked double MinPt   = 10.
	    untracked double MaxPt   = 10.
	}      
	untracked int32 Verbosity = 0 # for printouts, set it to 1 (or greater)   
    }	
    */ 
 

    service = Timing { }
#    service = SimpleProfiling { }
    
    
  module jpsiupsilon_filter = JpsieeFilter {
    untracked string moduleLabel = 'source'    
    int32 leptonType=11
    double leptonEtaMin=-3.5
    double leptonEtaMax=3.5
    double leptonPtMin=0.5
    vint32 motherId={553,100553,443}
}  
    path p1 = { 
	jpsiupsilon_filter
	# VtxSmeared, # No need to use it!
	# genParticleCandidates, # this is slow - No need to use it!
	# famosWithTracksAndEcalClusters
    }

   	
#    module o1 = PoolOutputModule { 
#	untracked string fileName = "test2.root" 
#	 untracked vstring outputCommands = {
#	"keep *",
#	"drop *_mix_*_*"
#	}
#	untracked PSet SelectEvents = {
#	    vstring SelectEvents = {"p1"}
#        }
#    }
#    endpath outpath = { o1 }

    
    # Keep the logging output to a nice level #
    include "FWCore/MessageService/data/MessageLogger.cfi"
    replace MessageLogger.destinations = {"detailedInfo.txt"}
    
}		
